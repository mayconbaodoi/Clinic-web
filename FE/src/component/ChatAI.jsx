import { useState, useEffect, useRef } from "react";
import { Bot } from "lucide-react";
import "../skin_web/ChatAI.css";

const ChatBox = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [hasGreeted, setHasGreeted] = useState(false);
  const messageEndRef = useRef(null);

  const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;

  const callGeminiAPI = async (allMessages) => {
    // G·ªôp t·∫•t c·∫£ messages th√†nh 1 ph·∫ßn t·ª≠ trong m·∫£ng contents
    const contents = [
      {
        role: "user",
        parts: [
          {
            text: allMessages
              .map((msg) => (msg.role === "user" ? msg.text : ""))
              .join("\n"),
          },
        ],
      },
    ];

    const res = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent?key=${API_KEY}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ contents }),
      }
    );

    const data = await res.json();
    console.log(data);
    return (
      data.candidates?.[0]?.content?.parts?.[0]?.text ||
      "Xin l·ªói, t√¥i ch∆∞a r√µ c√¢u h·ªèi."
    );
  };

  const handleSend = async () => {
    if (!input.trim()) return;

    const introPrompt = `
B·∫°n l√† tr·ª£ l√Ω AI cho d·ª± √°n GENLABVIETNAM ‚Äì n·ªÅn t·∫£ng h·ªó tr·ª£ x√©t nghi·ªám adn t·∫°i Vi·ªát Nam.
Ch·ªâ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn x√©t nghi·ªám adn, ƒëƒÉng k√Ω d·ªãch v·ª•, h∆∞·ªõng d·∫´n ph·∫ßn m·ªÅm GENLABVIETNAM.
Tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, th√¢n thi·ªán.
    `.trim();

    const userMsg = { role: "user", text: introPrompt + "\n\n" + input };
    setMessages((prev) => [...prev, { role: "user", text: input }]);
    setInput("");
    setLoading(true);

    const reply = await callGeminiAPI([...messages, userMsg]);
    setMessages((prev) => [...prev, { role: "model", text: reply }]);
    setLoading(false);
  };

  const handleReset = () => {
    setMessages([]);
    setInput("");
    setHasGreeted(false);
  };

  useEffect(() => {
    if (isOpen && !hasGreeted) {
      setMessages([
        {
          role: "model",
          text: "Xin ch√†o! üëã T√¥i l√† tr·ª£ l√Ω AI GENLABVIETNAM. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?",
        },
      ]);
      setHasGreeted(true);
    }
  }, [isOpen, hasGreeted]);

  useEffect(() => {
    messageEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // S·ª± ki·ªán m·ªü t·ª´ b√™n ngo√†i
  useEffect(() => {
    const openHandler = () => setIsOpen(true);
    window.addEventListener("open-chat", openHandler);
    return () => window.removeEventListener("open-chat", openHandler);
  }, []);


  return (
    <>
      {/* N√∫t chat n·ªïi */}
      <button
        className="fixed bottom-4 right-4 w-14 h-14 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 transition z-50 flex items-center justify-center"
        onClick={() => setIsOpen(!isOpen)}
        aria-label="M·ªü tr√≤ chuy·ªán"
      >
        <Bot className="w-6 h-6" />
      </button>

      {/* H·ªôp chat */}
      {isOpen && (
        <div className="fixed bottom-20 right-4 w-96 h-[420px] bg-white rounded-xl shadow-xl flex flex-col z-40 border border-gray-300">
          {/* Header */}
          <div className="bg-blue-600 text-white px-4 py-2 flex justify-between items-center rounded-t-xl">
            <span className="font-semibold">GENLABVIETNAM AI</span>
            <div className="space-x-2">
              <button
                className="bg-white text-blue-600 text-xs px-2 py-1 rounded hover:bg-gray-100"
                onClick={handleReset}
              >
                ƒêo·∫°n chat m·ªõi
              </button>
              <button
                className="bg-white text-blue-600 text-xs px-2 py-1 rounded hover:bg-gray-100"
                onClick={() => setIsOpen(false)}
              >
                ƒê√≥ng
              </button>
            </div>
          </div>

          {/* Tin nh·∫Øn */}
          <div className="flex-1 overflow-y-auto p-3 bg-gray-50">
            {messages.map((msg, idx) => (
              <div
                key={idx}
                className={`mb-2 flex ${
                  msg.role === "user" ? "justify-end" : "justify-start"
                }`}
              >
                <div
                  className={`px-4 py-2 rounded-2xl max-w-[70%] text-sm ${
                    msg.role === "user"
                      ? "bg-blue-600 text-white rounded-br-none"
                      : "bg-gray-200 text-gray-800 rounded-bl-none"
                  }`}
                >
                  {msg.text}
                </div>
              </div>
            ))}

            {loading && (
              <div className="flex items-center space-x-2 mb-2">
                <div className="bg-gray-200 text-gray-800 rounded-2xl px-4 py-2 text-sm">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}

            <div ref={messageEndRef} />
          </div>

          {/* Input */}
          <div className="p-2 border-t flex gap-2">
            <input
              type="text"
              className="flex-1 border border-gray-300 rounded-full px-4 py-2 text-sm outline-none focus:ring focus:ring-blue-200"
              placeholder="Nh·∫≠p c√¢u h·ªèi..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && handleSend()}
            />
            <button
              onClick={handleSend}
              className="bg-blue-600 text-white px-4 py-2 rounded-full hover:bg-blue-700 text-sm"
            >
              G·ª≠i
            </button>
          </div>
        </div>
      )}
    </>
  );
};

export default ChatBox;
